import Head from 'next/head'
import { useEffect, useRef, useState } from 'react'
import { io } from "socket.io-client"

export default function LandingPage() {

  const rooms = [{id:"1"},{id:"2"},{id:"3"},{id:"4"},{id:"5"}];
  const [openRoom, setOpenRoom] = useState('');
  const [message, setMessage] = useState('');
  const [nick, setNick] = useState('');
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const currentRoom = useRef('');
  const messagesEnd: any = useRef();

  let socket = io();

  const socketInitializer = async () => {

    await fetch('/api/socket');

    socket.on('connect', () => {
      console.log('connected');
    })

    socket.on('get_data', () => {
        getData();
        console.log('get_data');
    })

    return null

  }

  const changeRoomHandler = async (roomId: string) => {

    let prevRoomId = openRoom;
    currentRoom.current = roomId;
    setOpenRoom(roomId);
    socket.emit("join_to_room", roomId, prevRoomId);
    getData();

  }


  const inputChangeHandler = (e: any) => {
    setMessage(e.target.value)
  }

  const nickChangeHandler = (e: any) => {
    setNick(e.target.value)
  }


  const btnHandler = () => {

    var today = new Date();
    let toPut = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();

    sendMessage(toPut, message);
    socket.emit('sended_message', openRoom);
    setMessage('');
    
  }

  const enterHandler = (e: any) => {

    if(e.key === "Enter"){
      btnHandler();
    }

  }

  const sendMessage = async (time: string, message: string) => {

    let toSend = { message: message, time: time, roomId: openRoom, author: nick };

    await fetch('/api/add', {
        method: "POST",
        body: JSON.stringify(toSend),
        headers: {
            'Content-type': 'application/json; charset=UTF-8',
        }
    })

    getData();

  }

  const getData = async () => {

    let toGet = { roomId: currentRoom.current };

    setLoading(true);
    const req = await fetch('/api/list', {
        method: "POST",
        body: JSON.stringify(toGet),
        headers: {
            'Content-type': 'application/json; charset=UTF-8',
        }
    })

    const data = await req.json();
    setMessages(data.data);
    setLoading(false);
    messagesEnd.current.scrollIntoView({behavior: "smooth"});

  }

  useEffect(() => {

    socketInitializer();

    messagesEnd.current.scrollIntoView({behavior: "smooth"});

  }, [])

  return (	
		<>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="flex flex-col sm:flex-row w-full h-screen p-4 sm:p-12 gap-4">
                <div className="sm:h-full w-full sm:w-24 flex flex-row sm:flex-col bg-purple-50 rounded-3xl p-4 gap-4">
                    <h6 className="text-center my-auto sm:mt-0 sm:mb-8 from-purple-900/[.9] to-purple-500/[.9] bg-gradient-to-tr rounded-lg text-white font-rubikbold px-2 py-2">ROOM:</h6>
                    { rooms.map(r => (
                        <div key={r.id} className={`mx-auto border-[5px] ${r.id == openRoom ? `border-green-500` : `border-purple-900`} from-purple-900 text-xl cursor-pointer to-purple-500 bg-gradient-to-tr w-5/6 aspect-square rounded-full text-white flex`} onClick={ () => changeRoomHandler(r.id) } ><span className="my-auto mx-auto font-rubikbold">{ r.id }</span></div>
                    ))}
                </div>
                <div className="w-full h-full flex-col flex gap-4">
                  <div>
                    <input placeholder="Twój nick" type="text" className="px-4 py-2 text-purple-950 rounded-xl flex-grow" onChange={ nickChangeHandler } value={ nick }/>
                  </div>
                  <div className="bg-purple-50 w-full h-[100%] p-4 rounded-3xl relative overflow-y-scroll">
                      <div id="messages" className="mb-24 w-full flex flex-col mt-4 justify-end">
                          { !loading ? messages.map((m: any) => (
                            <>
                              <div key={m.message} className={(m.author == nick ? `ml-auto` : `mr-auto`)+` flex`}>
                                <p className="my-auto">{ m.author == nick ? m.message : null }</p>
                                <div className="mx-2 flex">
                                  <span className={`px-2 py-1 bg-green-500 text-white font-rubikbold rounded-xl mx-2 `+(m.author!==nick ? `order-last` : null)}>{ m.author }</span>
                                  <span className={`px-2 py-1 bg-green-900 text-white rounded-xl`}>{ m.time }</span>
                                </div>
                                <p className="my-auto">{ m.author !== nick ? m.message : null }</p>
                              </div>
                              <br/>
                            </>
                          )) : "Ładowanie..." }
                          <div className="h-1 w-full" ref={ (el) => { messagesEnd.current = el } }></div>
                      </div>
                      <div className={`fixed mb-4 sm:mb-12 bottom-5 w-[70%] h-12 gap-4 `+(openRoom !== '' && nick !== '' ? `flex`: `hidden`)}>
                          <input placeholder="Twoja wiadomość..." type="text" className="px-4 py-2 text-purple-950 rounded-xl flex-grow" onKeyDown={ enterHandler } onChange={ inputChangeHandler } value={ message }/>
                          <button className="bg-purple-900 text-white font-rubikbold rounded-xl h-full w-[80px] flex-none" onClick={ btnHandler } >Wyślij</button>
                      </div>
                  </div>
                </div>
            </div>
		</>
	)
}
